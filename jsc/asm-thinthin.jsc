#{#define _GNU_SOURCE}
#{#include <stdio.h>}
#{#include <sys/stat.h>}
#{#include <fcntl.h>}
#{#include <sys/fcntl.h>}
#{#include <unistd.h>}
#{#include <sys/types.h>}
#{#include <errno.h>}
#{#include <sys/ioctl.h>}
#{#include <sys/poll.h>}
#{#include <sys/uio.h>}
#{#include <dirent.h>}
#{#include "zeropage.h"}
#{#define AT_FDROOTD -101}
#{#define offsetof(type, field) ((unsigned)&((type *)0)->field)}
#{#include "js3.h"}

#{Heap thisheap("this.HEAP");}
#{Context context(&thisheap);}

#{JSV<zeropage*> zp("4096", "HEAP");}
#{JSV<timeval*> tvptr("tvptr");}
#{JSV<timespec*> timespec("timespec");}
#{JSV<struct stat*> statbufptr("statbufptr");}
#{JSV<dirent*> direntp("direntp");}
#{JSV<pollfd*> fdsptr("fdsptr");}
#{JSV<int*> intptr("intptr");}
#{JSV<size_t> i("i");}
#{JSV<iovec*> iov("iov");}

var ThinThin = {};

ThinThin.sbrk = function (size)
{
    size = (size + 4095) & -4096;
    var ret = this.%{zp[&zeropage::top_of_sbrk]};

    this.%{zp[&zeropage::top_of_sbrk]} += size;

    if (this.%{zp[&zeropage::top_of_sbrk]} > this.%{zp[&zeropage::top_of_memory]}) {
        throw "OOM";
    }

    return ret;
};

ThinThin.brk = function (addr)
{
    return 0;
};

var data = {};
var offsets = {};

var data_sections = [];
var gFunctions = {};
var main_pc;
var premain_pc;
var gdbstub_pc;
var initsp;

var MyCode;

var args;

if (args) {
}
else if (typeof process !== "undefined") {
    args = process.argv.slice(1);
}
else if (typeof scriptArgs !== "undefined") {
    args = scriptArgs.slice(0);
} else {
    args = ["<this program>"];
}

function Syscall(number, argspec0, argspec1, argspec2, argspec3, argspec4)
{
    var argspecs = [];
    if (argspec0 !== undefined) argspecs.push(argspec0);
    if (argspec1 !== undefined) argspecs.push(argspec1);
    if (argspec2 !== undefined) argspecs.push(argspec2);
    if (argspec3 !== undefined) argspecs.push(argspec3);
    if (argspec4 !== undefined) argspecs.push(argspec4);
    return function(arg0, arg1, arg2, arg3, arg4, arg5) {
        var args = [arg0, arg1, arg2, arg3, arg4, arg5];
        var rargs = [number];
        var i;
        var ret;
        for (i = 0; i < argspecs.length; i++) {
            var spec = argspecs[i];
            if (spec == "ptr") {
                rargs.push(this.HEAPU8);
                //console.log('string arg ' + CStringAt(this.HEAPU8, args[i]));
            } else {
                //console.log('integer arg ' + args[i].toString(16));
            }
            rargs.push(args[i]);
        }
        ret = os.sys.call.apply(undefined, rargs);

        return ret;
    };
}

function Syscall64(number, argspec0, argspec1, argspec2, argspec3,
                   argspec4, argspec5)
{
    var argspecs = [];
    if (argspec0 !== undefined) argspecs.push(argspec0);
    if (argspec1 !== undefined) argspecs.push(argspec1);
    if (argspec2 !== undefined) argspecs.push(argspec2);
    if (argspec3 !== undefined) argspecs.push(argspec3);
    if (argspec4 !== undefined) argspecs.push(argspec4);
    if (argspec5 !== undefined) argspecs.push(argspec5);
    return function(arg0, arg1, arg2, arg3, arg4, arg5) {
        var args = [arg0, arg1, arg2, arg3, arg4, arg5];
        var rargs = [number, 0];
        var i;
        var ret;
        for (i = 0; i < argspecs.length; i++) {
            var spec = argspecs[i];
            switch (spec) {
            case "fd":
            case "u64":
                rargs.push(args[i]);
                rargs.push(0);
                break;

            case "ptr":
            case "str":
            case "path":
                rargs.push(this.HEAPU8);
                rargs.push(args[i]);
                //console.log('str arg ' + CStringAt(this.HEAPU8, args[i]));
                break;

            case "ptrs":
            case "strs":
                var arg = [];
                var j;

                for (j = 0; this.HEAP32[args[i]+4*j>>2]; j++) {
                    arg.push(this.HEAPU8);
                    arg.push(this.HEAP32[args[i]+4*j>>2]);
                    //console.log('strs arg ' + CStringAt(this.HEAPU8, this.HEAP32[args[i]+4*j>>2]));
                }
                arg.push(0);
                arg.push(0);

                //console.log(arg);
                rargs.push(arg);
            }
        }
        //console.log(argspecs);
        //console.log(args);
        //console.log(rargs);
        ret = os.sys.call64.call(undefined, rargs);

        return ret;
    };
}

function init_syscall(name, number, ...args)
{
    Syscalls[name] = Syscalls[number] = new Syscall(number, ...args);
}

function init_syscall64(name, number, ...args)
{
    Syscalls[name] = Syscalls[number] = new Syscall64(number, ...args);
}

var Syscalls = {};

init_syscall(  "read",            0, "fd", "ptr", "u64");
init_syscall(  "write",           1, "fd", "ptr", "u64");
init_syscall(  "open",            2, "ptr", "u64", "u64");
init_syscall(  "close",           3, "fd");
init_syscall(  "stat",            4, "ptr", "ptr");
init_syscall(  "fstat",           5, "u64", "ptr");
init_syscall(  "lseek",           8, "u64", "u64", "u64");
init_syscall(  "rt_sigprocmask",    14, "u64", "ptr", "ptr");
init_syscall(  "ioctl_p",        16, "u64", "u64", "ptr");
init_syscall(  "access",         21, "ptr", "u64");
init_syscall(  "select",         23, "u64", "ptr", "ptr", "ptr", "ptr");
init_syscall(  "sched_yield",    24);
init_syscall(  "dup",            32, "u64");
init_syscall(  "dup2",           33, "u64", "u64");
init_syscall(  "getpid",         39);
init_syscall(  "clone",          56, "u64", "ptr", "ptr", "ptr", "ptr");
init_syscall(  "fork",           57);
init_syscall64("execve",         59, "path", "strs", "strs");
init_syscall(  "exit",           60, "u64");
init_syscall(  "wait4",          61, "u64", "ptr", "u64", "ptr");
init_syscall(  "kill",           62, "u64", "u64");
init_syscall(  "fcntl_v",        72, "u64", "u64");
init_syscall(  "fcntl_i",        72, "u64", "u64", "u64");
init_syscall(  "fcntl_p",        72, "u64", "u64", "ptr");
init_syscall(  "ftruncate",      77, "u64", "u64");
init_syscall(  "getcwd",         79, "ptr", "u64");
init_syscall(  "chdir",          80, "ptr");
init_syscall(  "fchdir",         81, "u64");
init_syscall(  "rename",         82, "ptr", "ptr");
init_syscall(  "mkdir",          83, "ptr", "u64");
init_syscall(  "rmdir",          84, "ptr");
init_syscall(  "unlink",         87, "ptr");
init_syscall(  "rename",         82, "ptr", "ptr");
init_syscall(  "chdir",          80, "ptr");
init_syscall(  "fchmod",         91, "fd", "u64");
init_syscall(  "gettimeofday",   96, "ptr", "u64");
init_syscall(  "getuid",        102);
init_syscall(  "getgid",        104);
init_syscall(  "geteuid",       107);
init_syscall(  "getegid",       108);
init_syscall(  "gettid",        186);
init_syscall(  "tkill",         200);
init_syscall(  "getdents",      217, "fd", "ptr", "u64");
init_syscall(  "clock_gettime", 228, "u64", "ptr");
init_syscall(  "exit_group",    231, "u64");
init_syscall(  "openat",        257, "fd", "ptr", "u64", "u64");
init_syscall(  "mkdirat",       258, "fd", "ptr", "u64");
init_syscall(  "newfstatat",    262, "fd", "ptr", "ptr", "u64");
init_syscall(  "unlinkat",      263, "fd", "ptr", "u64");
init_syscall(  "linkat",        265, "fd", "ptr", "fd", "ptr", "u64");
init_syscall(  "readlinkat",    267, "fd", "ptr", "ptr", "u64");
init_syscall(  "fchmodat",      268, "fd", "ptr", "u64", "u64");
init_syscall(  "faccessat",     269, "fd", "ptr", "u64", "u64");
init_syscall(  "ppoll",         271, "ptr", "u64", "ptr", "ptr");
init_syscall(  "utimensat",     280, "fd", "ptr", "ptr", "u64");
init_syscall(  "pipe2",         293, "ptr", "u64");
init_syscall(  "renameat2",     316, "fd", "ptr", "fd", "ptr", "u64");
init_syscall(  "execveat",      333, "fd", "ptr", "aptr", "aptr", "u64");

var SyscallSignatures = {
    read:         [  0, "fd", "ptr", "u64"],
    write:        [  1, "fd", "ptr", "u64"],
    open:         [  2, "ptr", "u64", "u64"],
    close:        [  3, "fd"],
    stat:         [  4, "ptr", "ptr"],
    fstat:        [  5, "u64", "ptr"],
    lseek:        [  8, "u64", "u64", "u64"],
    ioctl_p:      [ 16, "u64", "u64", "ptr"],
    access:       [ 21, "ptr", "u64"],
    select:       [ 23, "u64", "ptr", "ptr", "ptr", "ptr"],
    sched_yield:  [ 24],
    dup:          [ 32, "u64"],
    dup2:         [ 33, "u64", "u64"],
    getpid:       [ 39],
    clone:        [ 56, "u64", "ptr", "ptr", "ptr", "ptr"],
    fork:         [ 57],
    execve:       [ 59, "path", "strs", "strs"],
    exit:         [ 60, "u64"],
    wait4:        [ 61, "u64", "ptr", "u64", "ptr"],
    kill:         [ 62, "u64", "u64"],
    fcntl_v:      [ 72, "u64", "u64"],
    fcntl_i:      [ 72, "u64", "u64", "u64"],
    fcntl_p:      [ 72, "u64", "u64", "ptr"],
    ftruncate:    [ 77, "u64", "u64"],
    getcwd:       [ 79, "ptr", "u64"],
    chdir:        [ 80, "ptr"],
    fchdir:       [ 81, "u64"],
    rename:       [ 82, "ptr", "ptr"],
    mkdir:        [ 83, "ptr", "u64"],
    rmdir:        [ 84, "ptr"],
    unlink:       [ 87, "ptr"],
    rename:       [ 82, "ptr", "ptr"],
    chdir:        [ 80, "ptr"],
    gettimeofday: [ 96, "ptr", "u64"],
    getuid:       [102],
    getgid:       [104],
    geteuid:      [107],
    getegid:      [108],
    getdents:     [217, "fd", "ptr", "u64"],
    clock_gettime:[227, "u64", "ptr"],
    openat:       [257, "fd", "ptr", "u64", "u64"],
    mkdirat:      [258, "fd", "ptr", "u64"],
    newfstatat:   [262, "fd", "path", "wptr", "u64"],
    unlinkat:     [263, "fd", "ptr", "u64"],
    linkat:       [265, "fd", "ptr", "fd", "ptr", "u64"],
    readlinkat:   [267, "fd", "ptr", "ptr", "u64"],
    fchmodat:     [268, "fd", "ptr", "u64", "u64"],
    faccessat:    [269, "fd", "ptr", "u64", "u64"],
    ppoll:        [271, "ptr", "u64", "ptr", "ptr"],
    utimensat:    [280, "fd", "ptr", "ptr", "u64"],
    pipe2:        [293, "ptr", "u64"],
    renameat2:    [316, "fd", "ptr", "fd", "ptr", "u64"],
    execveat:     [333, "fd", "ptr", "aptr", "aptr", "u64"],
};

function TimeoutPromise(timeout)
{
    return new Promise((resolve, reject) => {
        window.setTimeout(resolve, timeout);
    });
}

function SplitPromise(n, promise)
{
    var resolve_lhs, resolve_rhs;
    var reject_lhs, reject_rhs;

    var promise_lhs = new Promise((resolve, reject) => {
        resolve_lhs = resolve;
        reject_lhs = reject;
    });

    var promise_rhs = new Promise((resolve, reject) => {
        resolve_rhs = resolve;
        reject_rhs = reject;
    });

    promise.then(value => {
        var lhs = value.substr(0, n);
        var rhs = value.substr(n);

        resolve_rhs(rhs);
        resolve_lhs(lhs);
    });

    return [promise_lhs, promise_rhs];
}

function DissectedPromise()
{
    this.promise = new Promise((resolve, reject) => {
        this.resolve = resolve;
        this.reject = reject;
    });
}

DissectedPromise.prototype.then = function (consequence)
{
    return this.promise.then(consequence);
};

function ImmediatePromise(v)
{
    if (v instanceof Promise)
        return v;

    this.value = v;
}

ImmediatePromise.prototype.then = function (consequence)
{
    return consequence(this.value);
};

function ThinThinDD(process, fdno)
{
    ThinThinFD.call(this, process, fdno);
    this.entries = {
        ".": this,
        "..": this.parent,
    }
}
ThinThinDD.prototype = Object.create(ThinThinFD.prototype);

ThinThinDD.prototype.mode = function ()
{
    return %{S_IFDIR + 0777};
};

ThinThinDD.prototype.openat = function (path)
{
    return Promise.reject(-%{ENOENT});
};

function ThinThinFetchDD(process, parent, stem, cache, fdno)
{
    ThinThinDD.call(this, process, fdno);
    this.stem = stem;
    this.cache = cache;
}

ThinThinFetchDD.prototype = Object.create(ThinThinDD.prototype);

ThinThinDD.prototype.walk = function (component, isdir)
{
    if (component in this.entries)
        return this.entries[component];

    var ret = Promise.resolve(this.discover(component, isdir));

    return ret.then(entry => {
        if (entry)
            this.entries[component] = entry;
    });
};

ThinThinFetchDD.prototype.discover = function (component, isdir)
{
    var url = this.stem + "/" + component;
    var ret;

    if (isdir) {
        ret = new ThinThinFetchDD(this.process, this, url, this.cache);
    } else {
        ret = new ThinThinFetchFD(this.process, url, this.cache);
    }

    return ret;
};

ThinThinFetchDD.prototype.openat_dir = function (path)
{
    return (new ThinThinFetchDD(this.process, this, this.stem + "/" + path,
                                this.cache))
        .open();
};

ThinThinFetchDD.prototype.openat = function (path)
{
    return (new ThinThinFetchFD(this.process, this.stem + "/" + path,
                                this.cache))
        .open();
};

function ThinThinFD(process, fdno)
{
    if (fdno === undefined)
        for (fdno = 0; process.fds[fdno]; fdno++)
            ;
    this.fdno = fdno;
    this.readers = 0;
    this.readData = [];
    this.readPosition = 0;
    this.readTo = 0;
    this.forgetInputPromises = new Set();
    this.onstuff = new Set();
    process.fds[fdno] = this;
    this.process = process;
}

ThinThinFD.prototype.mode = function ()
{
    return %{__S_IFREG + 0777};
};

ThinThinFD.prototype.size = function ()
{
    return this.readData.length;
}

ThinThinFD.prototype.open = function ()
{
    return Promise.resolve(this);
};

ThinThinFD.prototype.close = function ()
{
    while (this.readers)
        this.pause();

    delete this.process.fds[this.fdno];

    return Promise.resolve(0);
};

ThinThinFD.prototype.consume = function (i)
{
    this.readData = this.readData.substr(i);
};

ThinThinFD.prototype.stuffString = function (data)
{
    this.readData += data;

    var onstuff = this.onstuff;
    this.onstuff = new Set();

    for (var handler of onstuff)
        handler();
};

ThinThinFD.prototype.stuffOpened = function ()
{
    this.readOpened = true;

    var onstuff = this.onstuff;
    this.onstuff = new Set();

    for (var handler of onstuff)
        handler();
};

ThinThinFD.prototype.stuffError = function (error)
{
    this.readError = error;
    this.readEOF = true;

    var onstuff = this.onstuff;
    this.onstuff = new Set();

    for (var handler of onstuff)
        handler();

    this.close();
};

ThinThinFD.prototype.stuffEOF = function ()
{
    this.readEOF = true;

    var onstuff = this.onstuff;
    this.onstuff = new Set();

    for (var handler of onstuff)
        handler();
};

ThinThinFD.prototype.startStuffing = function ()
{
    if (!this.activeInputPromise) {
        this.activeInputPromise = new DissectedPromise();

        this.inputPromise().then((data) => {
            this.stuffString(data);
        });
    }

    return Promise.resolve();
};

ThinThinFD.prototype.stopStuffing = function ()
{
    if (this.activeInputPromise) {
        var activeInputPromise = this.activeInputPromise;
        delete this.activeInputPromise;
        activeInputPromise.resolve(data);
    }
};

ThinThinFD.prototype.unpause = function (len)
{
    if (this.readTo < this.readPosition + len)
        this.readTo = this.readPosition + len;

    if (this.readers++ === 0) {
        return new Promise((resolve, reject) => {
            this.startStuffing().then(() => {
                this.stuffOpened();
                resolve();
            }).catch(() => {
                this.readers--;
                reject();
            });
        });
    }

    return Promise.resolve();
};

ThinThinFD.prototype.pause = function ()
{
    if (--this.readers === 0)
        this.stopStuffing();
};

ThinThinFD.prototype.makeSeekable = function ()
{
    this.consume = i => {
        this.readPosition += i;
    };
};

ThinThinFD.prototype.readAsString = function ()
{
    if (!this.readEOF) {
        return this.unpause(Infinity).then(() => {
            return this.readAsString();
        });
    }

    return Promise.resolve(this.readData);
}

/* .read(undefined, 0, 0) returns a promise that resolves to 0 when
 * data is available to read. */
ThinThinFD.prototype.read = function(heap, ptr, len)
{
    if (ptr === undefined)
        ptr = 0;
    if (len === undefined)
        len = 0;

    if (this.readData.length > this.readPosition ||
        this.readEOF) {
        var i;

        for (i=0; i<len && i<this.readData.length - this.readPosition; i++) {
            var cc = this.readData.charCodeAt(this.readPosition+i);
            if (cc >= 0x80 || cc <= 0 || cc != cc) {
                //console.log("UTF-8 char in " + this.readData.substr(this.readPosition+i, 32));
            }
            heap[ptr+i] = cc;
        }
        this.consume(i);

        if (i == 0 || i == len)
            return i;

        if (this.readUnbuffered)
            return Promise.resolve(i);

        return Promise.resolve(this.read(heap, ptr+i, len-i)).then(j => i+j);
    }

    return this.unpause(len).then(() => {
        return new Promise((resolve, reject) => {
            this.onstuff.add(() => {
                this.pause();
                resolve(this.read(heap, ptr, len));
            });

            if (this.readData.length > this.readPosition ||
                this.readEOF) {
                var onstuff = this.onstuff;
                for (var handler of onstuff)
                    handler();
            }
        });
    });
};

ThinThinFD.prototype.available = function ()
{
    if (this.readData.length > this.readPosition)
        return Promise.resolve(this.readData.length - this.readPosition);

    if (!this.readAvailable) {
        var readAvailable = () => {
            this.pause();
            this.onstuff.delete(this.readAvailable);
            delete this.readAvailable;
        };
        this.unpause(0).then(() => {
            this.readAvailable = readAvailable;
            this.onstuff.add(this.readAvailable);
        });
    }

    return this.unpause(0).then(() => {
        this.pause();
        return this.readData.length - this.readPosition;
    });
};

ThinThinFD.prototype.inputPromise = function ()
{
    this.stuffEOF();
    return Promise.resolve("");
};

ThinThinFD.prototype.write = function (heap, ptr, len)
{
    if (ptr === undefined)
        ptr = 0;
    if (len === undefined)
        len = 0;

    if (len == 0)
        return Promise.resolve(0);

    if ("async hack") {
        this.outputPromise(heap, ptr, len).then
        (i =>
         this.write(heap, ptr+i, len-i).then(j => i+j));

        return len;
    } else {
        return this.outputPromise(heap, ptr, len).then
        (i =>
         this.write(heap, ptr+i, len-i).then(j => i+j));
    }
};

ThinThinFD.prototype.outputPromise = function (heap, ptr, len)
{
    var data = "";

    for (i=0; i<len; i++)
        data += String.fromCharCode(heap[ptr+i]);

    putstr(data);

    return Promise.resolve(len);
};

ThinThinFD.prototype.domPromise = function ()
{
    return document.getElementById("output");
};

ThinThinFD.prototype.clone = function ()
{
    return this;
};

ThinThinFD.prototype.freeze = function ()
{
    return new FrozenThinThinFD(this);
};

function HTMLFD(process, dom, fdno)
{
    ThinThinFD.call(this, process, fdno);

    if (dom === undefined)
        dom = document.getElementById("input");

    this.dom = dom;
}
HTMLFD.prototype = Object.create(ThinThinFD.prototype);

HTMLFD.prototype.readUnbuffered = true;

HTMLFD.prototype.stopStuffing = function ()
{
    if (this.dom && this.node && this.node_ta) {
        if (this.node_ta.value === "") {
            this.dom.removeChild(this.node);
            delete this.node;
            delete this.node_ta;
        }
    }
};

HTMLFD.prototype.startStuffing = function ()
{
    if (this.node)
        return Promise.resolve();

    return new Promise((resolve, reject) => {
        this.node = document.createElement("div");
        var node_ta = document.createElement("textarea");
        this.node_ta = node_ta;
        var node_b = document.createElement("button");
        node_b.innerHTML = "EOF";

        var node_send = document.createElement("button");
        node_send.innerHTML = "Send";

        this.node.appendChild(node_ta);
        this.node.appendChild(node_send);
        this.node.appendChild(node_b);

        if (0) node_ta.onchange = function (e) {
            var value = node_ta.value;
            if (value == "")
                fd.readEOF = true;
            resolve(value == "" ? "" : (value + "\n"));

            if (node.parentNode)
                node.parentNode.removeChild(node);

            e.stopPropagation();
            e.preventDefault();
        };

        node_b.onclick = e => {
            var value = node_ta.value;
            this.stuffString(value == "" ? "" : (value + "\n"));
            this.stuffEOF();

            e.stopPropagation();
            e.preventDefault();
        };

        node_send.onclick = e => {
            var value = node_ta.value;
            this.stuffString(value == "" ? "" : (value + "\n"));

            e.stopPropagation();
            e.preventDefault();
        };

        this.dom.appendChild(this.node);

        this.node.focus();
        resolve();
    });
};

var gLimboFD;
var gLimboPath;

var gRemoteFDs = {};

function FrozenThinThinFD(fd)
{
    var rfdno;

    for (rfdno = 0; rfdno in gRemoteFDs; rfdno++);

    gRemoteFDs[rfdno] = fd;

    this.rfdno = rfdno;
    this.fdno = fd.fdno;
}

FrozenThinThinFD.prototype.thaw = function (process, target)
{
    var fd = new RemoteFD(process, target, this.rfdno, this.fdno);
    gRemoteFDs[this.rfdno] = fd;
    fd.target = target;

    return fd;
};

function ThinThinFetchFD(process, url, cache, fdno)
{
    ThinThinFD.call(this, process, fdno);
    this.url = url;
    this.cache = cache;
    this.makeSeekable();
}

ThinThinFetchFD.prototype = Object.create(ThinThinFD.prototype);

ThinThinFetchFD.prototype.open = function ()
{
    return new Promise((resolve, reject) => {
        this.unpause(0).then(() => {
            var handler = () => {
                if (this.readError) {
                    reject(this.readError);
                } else if (this.readOpened || this.readEOF) {
                    resolve(this);
                } else {
                    this.onstuff.add(handler);
                }
            };
            handler();
        }).catch((e) => {
            reject(e);
        });
    });
};

ThinThinFetchFD.prototype.startStuffing = function ()
{
    var url = this.url;

    delete this.url;

    if (url === undefined) {
        return Promise.reject("EOF");
    }

    if (this.cache) {
        var req = new Request(url);

        return this.cache.match(req).then((response) => {
            if (response === undefined) {
                console.log("have to fetch " + url);
                return fetch(url);
            }
            return response;
        }).then(response => {
            this.cache.put(url, response.clone());
            if (response.ok)
                return response.arrayBuffer();

            return Promise.reject(response);
        }).then((abuf) => {
            var view = new Uint8Array(abuf);
            var text = "";

            for (var i = 0; i < abuf.byteLength; i++) {
                var cc = view[i];
                if (cc & 0x80) cc += 0x100;
                text += String.fromCharCode(cc);
            }

            this.stuffString(text);
            this.stuffEOF();
        }).catch((e) => {
            return Promise.reject(e);
        });
    }

    return fetch(url).then(response => {
        if (response.ok)
            return response.arrayBuffer();

        return Promise.reject(response);
    }).then((abuf) => {
        var view = new Uint8Array(abuf);
        var text = "";

        for (var i = 0; i < abuf.byteLength; i++) {
            var cc = view[i];
            if (cc & 0x80) cc += 0x100;
            text += String.fromCharCode(cc);
        }

        this.stuffString(text);
        this.stuffEOF();
    }).catch((e) => {
        return Promise.reject(e);
    });
};

ThinThinFetchFD.prototype.inputPromise = function ()
{
    var url = this.url;

    delete this.url;

    if (!url) {
        return Promise.resolve("");
    }

};

function SparseDD(base, fdno)
{
    ThinThinDD.call(this, base.process, fdno);
    this.base = base;

    this.entries = {};
}
SparseDD.prototype = Object.create(ThinThinDD.prototype);

SparseDD.prototype.mode = function ()
{
    return this.base.mode();
};

SparseDD.prototype.open = function ()
{
    if (this.readOpened)
        return Promise.resolve(this);

    return this.base.open().then((fd) => {
        return this.readMeta();
    }).then(() => {
        this.stuffOpened();

        return this;
    });
};

SparseDD.prototype.readMeta = function ()
{
    return this.base.openat(".dirs").then((fd) => {
        return fd.readAsString();
    }).then((str) => {
        var dirs = str.split(/\0/);

        for (var dir of dirs) {
            dir = dir.replace(/^\.\//, "");
            this.entries[dir] = true;
        }

        return true;
    });
};

SparseDD.prototype.openat = function (path)
{
    var m;
    if (m = path.match(/^([^/]+)\/(.+)$/)) {
        return this.openat(m[1]).then((fd) => {
            return fd.open().then(() => {
                return fd;
            });
        }).then((fd) => {
            return fd.openat(m[2]);
        });
    } else {
        if (path === ".") {
            return Promise.resolve(this);
        }
        if (path in this.entries)
            return this.base.openat_dir(path).then((fd) => {
                return fd.open().then(() => {
                    return new SparseDD(fd);
                });
            });
        else
            return this.base.openat(path).then((fd) => {
                return fd.open().then(() => {
                    return fd;
                });
            });
    }
};

function ReadableFD(process, readable, fdno)
{
    ThinThinFD.call(this, process, fdno);
    this.readable = readable;
    this.makeSeekable();
};

ReadableFD.prototype = Object.create(ThinThinFD.prototype);

ReadableFD.prototype.startStuffing = function ()
{
    var readable = this.readable;
    this.onend = () => {
        this.stuffEOF();
    };
    this.ondata = (data) => {
        var text = "";

        for (var i = 0; i < data.length; i++) {
            var cc = data[i];
            if (cc & 0x80) cc += 0x100;
            text += String.fromCharCode(cc);
        }

        this.stuffString(text);
    };

    readable.on("end", this.onend);
    readable.on("data", this.ondata);

    return Promise.resolve();
};

ReadableFD.prototype.stopStuffing = function ()
{
    var readable = this.readable;

    readable.removeListener("end", this.onend);
    delete this.onend;

    readable.removeListener("data", this.ondata);
    delete this.ondata;
};

function WritableFD(process, writable, fdno)
{
    ThinThinFD.call(this, process, fdno);
    this.writable = writable;
};

WritableFD.prototype = Object.create(ThinThinFD.prototype);

WritableFD.prototype.outputPromise = function (heap, ptr, len)
{
    var data = "";

    if (len == 0)
        return 0;

    for (i=0; i<len; i++)
        data += String.fromCharCode(heap[ptr+i]);

    this.writable.write(data);

    return Promise.resolve(len);
};

function ArrayBufferFD(process, abufPromise, fdno)
{
    ThinThinFD.call(this, process, fdno);

    this.abufPromise = abufPromise;
}
ArrayBufferFD.prototype = Object.create(ThinThinFD.prototype);

function PipeFD(process, fdno)
{
    ThinThinFD.call(this, process, fdno);
}

PipeFD.prototype.connect = function (other)
{
    this.other = other;
};

function PipeConnection(ipipe, opipe)
{
    this.i = ipipe;
    this.o = opipe;
}

function IPipeFD(process, fdno)
{
    PipeFD.call(this, process, fdno);
}
IPipeFD.prototype = Object.create(PipeFD.prototype);

function OPipeFD(process, fdno)
{
    PipeFD.call(this, process, fdno);
}
OPipeFD.prototype = Object.create(PipeFD.prototype);

OPipeFD.prototype.outputPromise = function (heap, ptr, len)
{
    if (len == 0)
        return 0;

    if (this.other.ready) {
        var l = Math.min(len, this.other.len);

        for (var i = 0; i < l; i++)
            this.other.heap[this.other.ptr + i] = heap[ptr + i];

        this.other.resolve(l);
    } else {

    }
};

function RemoteFD(process, target, rfdno, fdno)
{
    ThinThinFD.call(this, process, fdno);

    gRemoteFDs[rfdno] = this;
    this.target = target;
    this.rfdno = rfdno;
}

RemoteFD.prototype = Object.create(ThinThinFD.prototype);

RemoteFD.prototype.inputPromise = function ()
{
    console.log("RemoteFD.inputPromise");
    return new Promise((resolve, reject) => {
        this.target(["read", this.rfdno], "*");
        this.stuffString = (data) => {
            resolve(data);
            delete this.stuffString;
        };
    });
};

RemoteFD.prototype.outputPromise = function (heap, ptr, len)
{
    console.log("RemoteFD.outputPromise " + heap + " " + ptr + " " + len);
    var buf = new ArrayBuffer(len);
    var buf8 = new Uint8Array(buf);
    for (var i = 0; i < buf.byteLength; i++)
        buf8[i] = heap[ptr+i];

    this.target(["send", this.rfdno, buf]);

    return Promise.resolve(len);
};

var fs;

//if (typeof global !== "undefined")
//    fs = require('fs');

function FSDD(process, root, fdno)
{

    ThinThinDD.call(this, process, fdno);
    this.root = root;
}

FSDD.prototype = Object.create(ThinThinDD.prototype);

FSDD.prototype.openat = function (path, flags, mode)
{
    if (!path.match(/^\//))
        path = this.root + "/" + path;
    if (flags === undefined)
        flags = "r";
    if (mode === undefined)
        mode = 0;
    return new Promise((resolve, reject) => {
        fs.open(path, flags, mode, (err, fd) => {
            if (err)
                reject(err);
            else
                resolve(new ReadableFD(this.process, fs.createReadStream
                                       (null,
                                        { flags: "r",
                                          encoding: null,
                                          fd: fd,
                                          mode: mode,
                                          autoClose: true
                                        })));
        });
    });
};

if (typeof(os) !== "undefined" &&
    typeof(os.sys) !== "undefined") {
    for (var syscall in Syscalls)
        ThinThin[syscall] = Syscalls[syscall];
    ThinThin.exit = function (code) {
        if (os.getenv("STATS"))
            console.log("runtime: " + (Date.now() - lastdonetime));
        quit(code);
        if (code != 0 && code !== undefined)
            throw "Exit Status " + code;
        else
            throw new SuccessException();
    };
    ThinThin.gethostname = function (addr, len) {
        this.HEAP8[addr] = 0;

        return 0;
    };
    ThinThin.isatty = function () { return 1 };
    ThinThin.restart = function (dst, src, len, entry)
    {
        return this.restart(dst, src, len, entry);
    };
    ThinThin.fork = function () {
        return os.sys.fork();
    };
} else {
    if (typeof global !== "undefined") {
        ThinThin.fcntl_i = function () {
            return 0;
        };
        ThinThin.fcntl_v = function () {
            return 0;
        };
        ThinThin.pipe2 = function (intptr) {
            var ifd = new IPipeFD(this.process).fdno;
            var ofd = new OPipeFD(this.process).fdno;

            %{*intptr = "ifd"}
            %{*(intptr+1) = "ofd"}

            return 0;
        };
        ThinThin.clock_gettime = function (clk_id, timespec)
        {
            var date = new Date();
            var s = date / 1000.0;
            var ns = (date % 1000.0) * 1000000.0;

            %{timespec[&timespec::tv_sec] = 0}
            %{timespec[&timespec::tv_nsec] = 0}
            %{timespec[&timespec::tv_sec] = "s"}
            %{timespec[&timespec::tv_nsec] = "ns"}

            return 0;
        };
    ThinThin.getcwd = function (addr, len) {
        this.HEAP8[addr] = 0;

        return 0;
    };
    } else {
    }
    ThinThin.isatty = function (fdno) {
        return fdno <= 2 ? 1 : 0;
    };
    ThinThin.gethostname = function (addr, len) {
        this.HEAP8[addr] = 0;

        return 0;
    };
    ThinThin.read = function (fdno, ptr, len) {
        var fd = this.fds[fdno];

        if (!fd)
            return -%{EBADF};

        if (len == 0)
            return 0;

        var ret = fd.read(this.HEAPU8, ptr, len);

        return ret;
    };
    ThinThin.write = function (fdno, ptr, len) {
        var fd = this.fds[fdno];

        if (!fd)
            return -%{EBADF};

        if (len == 0)
            return 0;

        return fd.write(this.HEAPU8, ptr, len);
    };
    ThinThin.openat = function (fdno, ptr, flags, mode) {
        var path = CStringAt(this.HEAPU8, ptr);

        if (path.length && path === gLimboPath) {
            console.log("match! path: " + path);
            var ret = gLimboFD;
            gLimboFD = undefined;
            gLimboPath = undefined;
            return ret.fdno;
        }

        if (path.match(/^\//))
            return -%{ENOENT};

        var dd = this.fds[fdno];
        if (!dd)
            dd = this.process.ddroot;


        return dd.openat(path, flags, mode)
            .then((fd) => fd.fdno).catch((error) => -%{ENOENT});
    };
    ThinThin.close = function (fdno) {
        var fd = this.fds[fdno];

        if (!fd)
            return -%{EBADF};

        return fd.close();
    };
    ThinThin.faccessat = function (fdno, ptr, flags, mode) {
        return 0;
    };
    ThinThin.newfstatat = function (fdno, pathstr, statbufptr, flags) {
        var dd = this.fds[fdno] || this.process.ddroot;
        var path = CStringAt(this.HEAPU8, pathstr);

        if (path.match(/^\//))
            return -%{ENOENT};

        if (!dd)
            return -%{EBADF};

        if ("openat" in dd)
            return dd.openat(path).then(fd => {
                var off;
                for (off = 0; off < %{sizeof(struct stat)}; off += 4)
                    this.HEAP32[statbufptr+off>>2] = 0;

                %{statbufptr[&stat::st_nlink] = 1LL}
                %{statbufptr[&stat::st_mode] = "fd.mode()"}
                %{statbufptr[&stat::st_size] = "fd.size()"}
                %{statbufptr[&stat::st_blksize] = "fd.size()"}
                %{statbufptr[&stat::st_blocks] = "1"}

                if (gLimboFD)
                    gLimboFD.close();
                gLimboFD = fd;
                console.log("path " + path);
                gLimboPath = path;

                return 0;
            }).catch(err => -%{ENOENT});
        else {
            var fd = dd;
            var off;
            for (off = 0; off < %{sizeof(struct stat)}; off += 4)
                this.HEAP32[statbufptr+off>>2] = 0;

            %{statbufptr[&stat::st_nlink] = 1LL}
            %{statbufptr[&stat::st_mode] = "fd.mode()"};
            %{statbufptr[&stat::st_size] = "fd.size()"}
            %{statbufptr[&stat::st_blksize] = "fd.size()"}
            %{statbufptr[&stat::st_blocks] = "1"}

            return 0;
        }
    };
    ThinThin.stat = function (ptr, bufptr) {
        var path = CStringAt(this.HEAPU8, ptr);

        path = path.replace(/^.*[\/]/, "");

        /* st_dev: 64 bits */
        this.HEAP32[bufptr+ 0>>2] = 0;
        this.HEAP32[bufptr+ 4>>2] = 0;
        /* pad1: 32 bits */
        this.HEAP32[bufptr+ 8>>2] = 0;
        /* __st_ino: 32 bits */
        this.HEAP32[bufptr+12>>2] = 0;
        /* st_mode: 32 bits */
        this.HEAP32[bufptr+16>>2] = 0;
        /* st_nlink: 64 bits */
        this.HEAP32[bufptr+20>>2] = 0;
        this.HEAP32[bufptr+24>>2] = 0;
        this.HEAP32[bufptr+28>>2] = 0;
        this.HEAP32[bufptr+32>>2] = 0;
        this.HEAP32[bufptr+36>>2] = 0;
        this.HEAP32[bufptr+40>>2] = 0;
        this.HEAP32[bufptr+44>>2] = 0;

        if (path == "terminfo") {
            this.HEAP32[bufptr+6*4>>2] = 4 << 12;
        } else if (path.match(/\.elc$/)) {
            return -2;
        } else {
            //console.log("statting " + CStringAt(ptr));
        }

        return 0;
    };
    var first = 3;
    ThinThin.getdents = function (fdno, direntp, count)
    {
        if (first) {
            %{direntp[&dirent::d_ino] = "0"}
            %{direntp[&dirent::d_off] = "0"}
            %{direntp[&dirent::d_reclen] = 9}

            CStringTo(this.HEAP8, %{direntp+&dirent::d_name}, "words.eng");
            first--;
            return 26;
        }
        return 0;
    };
    ThinThin.fstat = function (fdno, bufptr) {
        var fd = this.fds[fdno];
        this.HEAP32[bufptr+ 0>>2] = 0;
        this.HEAP32[bufptr+ 4>>2] = 0;
        this.HEAP32[bufptr+ 8>>2] = 0;
        this.HEAP32[bufptr+12>>2] = 0;
        this.HEAP32[bufptr+16>>2] = 0;
        this.HEAP32[bufptr+20>>2] = 0;
        this.HEAP32[bufptr+24>>2] = 0;
        this.HEAP32[bufptr+28>>2] = 0;
        this.HEAP32[bufptr+32>>2] = 0;
        this.HEAP32[bufptr+36>>2] = 0;
        this.HEAP32[bufptr+40>>2] = 0;
        this.HEAP32[bufptr+44>>2] = 0;
        this.HEAP32[bufptr+48>>2] = 0;
        this.HEAP32[bufptr+52>>2] = 0;
        this.HEAP32[bufptr+56>>2] = 0;
        this.HEAP32[bufptr+60>>2] = 0;
        this.HEAP32[bufptr+64>>2] = 0;

        if (false) {
            this.HEAP32[bufptr+6*4>>2] = 4 << 12;
        } else {
            this.HEAP32[bufptr+6*4>>2] = 1 << 15;
        }

        return Promise.resolve(fd.read()).then(i => {
            this.HEAP32[bufptr+0x30>>2] = fd.readData.length;
            this.HEAP32[bufptr+0x38>>2] = fd.readData.length;
            this.HEAP32[bufptr+0x40>>2] = fd.readData.length;
            return 0;
        });
    };
    ThinThin.ioctl_p = function (fdno, code, intptr) {
        fdno = 0;
        var fd = this.fds[fdno];

        switch (code) {
        case %{FIONREAD}:
            return fd.available().then(avail => {
                if (avail) {
                    %{*intptr = "avail"}
                } else {
                    %{*intptr = 0}
                }

                return 0;
            });

        default:
            return -%{EINVAL};
        }
    };
    ThinThin.ppoll = function (fdsptr, nfds, tvptr, sigmaskptr) {
        var incall = true;
        var retval = 0;
        var retry = function () {
            if (incall)
                return ThinThin.ppoll.call(this,
                                           fdsptr, nfds, tvptr, sigmaskptr);
        };

        var all = [];
        var any = [];

        var ii;
        for (ii = 0; ii < nfds; ii++) {
            var i = ii;
            var fdno = %{fdsptr[i+&pollfd::fd]};
            var fd = this.fds[fdno];
            var events = %{fdsptr[i+&pollfd::events]};
            %{fdsptr[i+&pollfd::revents] = 0}
            if (events & %{POLLIN}) {
                all.push(fd.available().then((avail) => {
                    if (incall) {
                        if (avail > 0) {
                            if (%{fdsptr[i+&pollfd::revents]} == 0)
                                retval++;
                            %{fdsptr[i+&pollfd::revents]} |= %{POLLIN};
                        }
                    }
                }));
                any.push(() => fd.read());
            }
        }

        return Promise.all(all).then(() => {
            if (retval)
                return retval;

            var a = [];
            a.push(Promise.race(any.map(p => Promise.resolve(p()))).then(() => retry()));
            if (tvptr) {
                var s = %{tvptr[&timeval::tv_sec]};
                var ns = %{tvptr[&timeval::tv_usec]};

                var ms = 1000 * s + 1e-6 * ns;

                a.push(TimeoutPromise(ms).then(() => 0));
            }

            return Promise.race(a).then(rval => {
                incall = false;
                return rval;
            });
        });
    };
    ThinThin.lseek = function (fdno, pos, whence) {
        console.log("lseek " + fdno + " " + pos + " " + whence);
        var fd = this.fds[fdno];

        if (whence == %{SEEK_SET})
            fd.readPosition = pos;
        else if (whence == %{SEEK_CUR})
            fd.readPosition += pos;
        else if (whence == %{SEEK_END})
            throw("SEEK_END not supported");
        else
            return -%{EINVAL};

        return fd.readPosition;
    };
    ThinThin.access = function (ptr, mode) {
        return ThinThin.stat.call(this, ptr, 0);
    };
    ThinThin.exit = function (code) {
        console.log("runtime: " + Date.now() - lastdonetime);
        if (typeof quit !== "undefined")
            quit(code);
        else if (typeof process !== "undefined")
            process.exit(code);
        else if (typeof document !== "undefined") {
            document.getElementById("output").textContent += "Exit Status " + code;
            this.stop(0xffffffff);
        }
        if (code != 0 && code !== undefined)
            throw "Exit Status " + code;
        else
            throw new SuccessException();
    };
    //ThinThin.unlink =       Module._unlink;
    //ThinThin.rename =       Module._rename;
    //ThinThin.chdir =        Module._chdir;
    ThinThin.gettimeofday = function (tvptr, tzptr) {
        var date = new Date();
        var s = date / 1000.0;
        var us = (date % 1000.0) * 1000.0;

        %{tvptr[&timeval::tv_sec] = "s"}
        %{tvptr[&timeval::tv_usec] = "us"}

        return 0;
    };
    ThinThin.clone = function (flags, child_stack, ptid, ctid, regs)
    {
        var new_process = this.process.clone();
    };
    ThinThin.restart = function (dst, src, len, entry)
    {
        return this.restart(dst, src, len, entry);
    };
    ThinThin.execveat = function (dirfdno, pathptr, argvptr, envpptr, flags)
    {
        if (this.HEAP8[pathptr] == "/".charCodeAt(0))
            dirfdno = %{AT_FDROOTD};

        var fd;
        if (this.HEAP8[pathptr] == 0 &&
            flags & %{AT_EMPTY_PATH})
            fd = this.fds[dirfdno];
        else
            fd = this.fds[ThinThin.openat.call(this, dirfdno, pathptr, 0)];

        if (!fd)
            return -%{EBADF};

        var argv = CStringsAt(argvptr);
        var envp = CStringsAt(envpptr);
        var blob = fd.blob();
    };
}

ThinThin.getuid = ThinThin.geteuid = ThinThin.getgid = ThinThin.getegid = function ()
{
    return 0;
};

ThinThin.getpid = ThinThin.getppid = function ()
{
    return 1;
};

ThinThin.dlload = function (addr, len, memp)
{
    var sab = this.heap.slice(addr, addr+len);
    var ab = new ArrayBuffer(len);
    var sav = new Uint8Array(sab);
    var av = new Uint8Array(ab);
    for (var i=0; i < len; i++)
        av[i] = sav[i];
    var module = new Wasm32Module(ab);

    return module.load(this, this.vm).then((ret) => {
        this.HEAP32[memp>>2] = module.dyninfo.data_end - module.dyninfo.data;
        if (module.dyninfo.libs.length)
            module.depstring = module.dyninfo.libs.join(String.fromCharCode(0)) + String.fromCharCode(0);
        else
            module.depstring = "";

        return ret;
    }).catch((e) => {
        console.log(e);

        return 0;
    });
};

ThinThin.dlreaddep = function (modi, mem, len)
{
    var module = Wasm32Modules[modi];
    var ret = 0;

    while (module.depstring.length > 0 && ret < len) {
        this.HEAPU8[mem+ret] = module.depstring.charCodeAt(0);
        module.depstring = module.depstring.substr(1);
        ret++;
    }

    return ret;
};

ThinThin.dlinstantiate = function (modi, mem)
{
    var module = Wasm32Modules[modi];

    return module.instantiate(this, this.vm, mem).then(() => {
        return 0;
    }).catch((e) => {
        return -%{ENOMEM};
    });
};

ThinThin.dlkill = function (modi)
{
    var module = Wasm32Modules[modi];

    return module.kill(this, this.vm);
};

ThinThin.dlopen = function (cpath)
{
    console.log('dlopen')
    var path = CStringAt(this.HEAP8, cpath);
    console.log('dlopen: ' + cpath + ' ' + path)
    var module = new Wasm32Module(os.file.readFile(path, "binary"));
    console.log('dlopen: ' + module)

    return module.instantiate(this, this.vm).then(() => {
        console.log("success");
        return 0;
    }).catch((e) => { console.log(e); return -%{ENOMEM}; });
};

ThinThin.dlsym = function (modi, csym)
{
    var module = Wasm32Modules[modi];

    return new Promise((resolve, reject) => {
        var symbol = CStringAt(this.HEAP8, csym);

        let ret = module.symtab[symbol] || 0;

        resolve(ret);
    }).catch((e) => {
        console.log(e);

        return -%{ENOMEM};
    })
};

ThinThin[20] = ThinThin.writev = function (fd, iov, iovcnt)
{
    var gret = 0;
    if (iovcnt == 0)
        return 0;
    var i = 0;
    while (%{iov[i+&iovec::iov_len]} == 0)
        i++;
    var ret = ThinThin.write.call(this, fd, %{iov[i+&iovec::iov_base]}, %{iov[i+&iovec::iov_len]});

    return ret;
};


// mmap
ThinThin[9] = function ()
{
    return -1;
};

// brk
ThinThin[12] = function (brk)
{
    return brk;
};

ThinThin.syscall = function (n, ...args)
{
    if (n.toString() in ThinThin)
        return ThinThin[n].call(this, ...args);
    else
        return -38;
};
