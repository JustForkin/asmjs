#{#define _GNU_SOURCE}
#{#include <stdio.h>}
#{#include <sys/stat.h>}
#{#include <fcntl.h>}
#{#include <sys/fcntl.h>}
#{#include <unistd.h>}
#{#include <sys/types.h>}
#{#include <errno.h>}
#{#include <sys/ioctl.h>}
#{#include <sys/poll.h>}
#{#include "zeropage.h"}
#{#include "js3.h"}
#{#define AT_FDROOTD -101}

#{Heap thisheap("this.HEAP");}
#{Context context(&thisheap);}

function AsmJSCodeSection(name, constructor)
{
    this.name = name;
    this.constructor = constructor;
    this.functions = {};
}

var global = this;

AsmJSCodeSection.prototype.instantiate = function (thread)
{
    var mod;

    mod = this.constructor(global, {
        print: print,
        now: function () { return +(new Date())/1000.0 },
        bp_addr: 0,
        extcall: thread.extcall.bind(thread),
        indcall: thread.indcall.bind(thread),
        tp: 0,
        abort: thread.abort.bind(thread),
        eh_return: thread.eh_return.bind(thread),
        fround: Math.fround,
        bogotics: 0x7fffffff,
        single_stepping: 0,
        steps: 0,
        bp_hit: 0,
        QNaN: 0.0/0.0,
        tp: 0,
        fround: Math.fround,
    }, thread.process.heap);

    thread.module = mod;

    if (!mod.inAsmJS())
        throw("no asm.js!");

    for (var page in this.functions) {
        var fo = this.functions[page];

        fo.code = mod[fo.address];
        thread.process.deffun(page, fo);
    }
};

function AsmJSDataSection(name, offset, data)
{
    this.name = name;
    this.offset = offset;
    this.data = data;
}

AsmJSDataSection.prototype.instantiate = function (thread)
{
    var heap = thread.process.heap;
    var HEAP8 = new Int8Array(heap);

    for (var i = 0; i < this.data.length; i++)
        HEAP8[this.offset + i] = this.data[i];
};

function AsmJSSection()
{
}

function AsmJSModule()
{
    this.sections = {};
    this.functions = {};
}

AsmJSModule.prototype.add_section = function (section)
{
    this.sections[section.name] = section;
};

AsmJSModule.prototype.instantiate = function (thread)
{
    for (var name in this.sections) {
        this.sections[name].instantiate(thread);
    }
};

function AsmJSThread(process, module, threadpage)
{
    this.process = process;
    process.threads.push(this);
    var system = process.system;

    this.fds = process.fds;

    this.system = system;
    system.threads.push(this);

    this.HEAP8 = process.HEAP8;
    this.HEAP16 = process.HEAP16;
    this.HEAP32 = process.HEAP32;
    this.HEAPU8 = process.HEAPU8;
    this.HEAPU16 = process.HEAPU16;
    this.HEAPU32 = process.HEAPU32;
    this.HEAPF32 = process.HEAPF32;
    this.HEAPF64 = process.HEAPF64;

    this.threadpage = threadpage;

    this.module = module;
    this.rmodule = module;

    this.extcallRet = {};
    this.exports = {};
    this.types = {};
    this.types_by_id = {};
    this.vars = {};
    this.queue = [];

    var thread = this;

    this.types_by_id["PKc"] = this.types["string"] = function (ptr) {
        if (ptr === 0)
            return null;

        var str = CStringAt(thread.HEAP8, ptr);

        this.thread = thread;
        this.address = ptr;
        this.str = str;

        this.toString = function () {
            return this.str;
        };

        var ret = new String(this.str);

        ret.address = ptr;

        return ret;
    };
}

#{JSV<threadpage*> tp("this.threadpage");}

AsmJSThread.prototype.stopped = function ()
{
    return %{tp[&threadpage::stop_reason]};
};

AsmJSThread.prototype.pc = function ()
{
    return %{tp[&threadpage::pc]};
};

AsmJSThread.prototype.sp = function ()
{
    return %{tp[&threadpage::sp]};
};

AsmJSThread.prototype.initsp = function ()
{
    return %{tp[&threadpage::initsp]};
};

var run;

AsmJSThread.prototype.stop = function (reason)
{
    var stopped = this.stopped();
    %{tp[&threadpage::stop_reason]} = reason;

    if (stopped && reason == 0) {
        this.system.runqueue.push(this);
        if (run)
            run();
    }
};

AsmJSThread.prototype.set_pc = function (pc)
{
    %{tp[&threadpage::pc]} = pc;
};

AsmJSThread.prototype.set_sp = function (sp)
{
    %{tp[&threadpage::sp]} = sp;
};

AsmJSThread.prototype.set_initsp = function (initsp)
{
    %{tp[&threadpage::initsp]} = initsp;
};

AsmJSThread.prototype.extcall = function (modstr, funstr, pc, sp)
{
    var mod = CStringAt(this.HEAPU8, modstr);
    var fun = CStringAt(this.HEAPU8, funstr);

    //console.log('extcall ' + mod + ' ' + fun);

    if (sp in this.extcallRet) {
        var ret = this.extcallRet[sp];

        if (ret !== undefined) {
            if (typeof Promise !== undefined &&
                ret instanceof Promise) {
                this.stop(1);
                return sp|1;
            }

            this.module.set_rv(ret);

            delete this.extcallRet[sp];

            return sp;
        }
    }

    var nargs = this.HEAP32[(sp+12)>>2];
    var is_void = ((nargs & 0x40000000) != 0) !=
        ((nargs & 0x80000000) != 0);
    var is_void_2 = this.HEAP32[sp+4>>2] != 0;

    if (is_void)
        nargs ^= 0x40000000;

    var args = [];
    if (nargs >= 0) {
        for (var ai = 0; ai < nargs; ai++) {
            args[ai] = this.HEAP32[sp+16+4*ai>>2];
        }
    }

    //console.log("extcall " + fun + " " + args);

    switch (mod) {
    case "thinthin":
        if (ThinThin[fun]) {
            try {
                retv = ThinThin[fun].apply(this, args);
                break;
            } catch (e) {
                throw "died while executing " + fun + ' arg0 ' + args[0] + " e " + e;
            }
        }
        throw "couldn't find " + fun;
    default:
        throw("giving up, pc " + pc.toString(16) + " fun " + funstr.toString(16) + " " + fun + " mod " + modstr.toString(16) + " " + mod);
    }

    if (typeof Promise !== "undefined" &&
        retv instanceof Promise) {
        this.extcallRet[sp] = retv;
        this.stop(1);

        retv.then(r => {
            this.extcallRet[sp] = r;
            this.stop(0);
        });

        return sp|1;
    }

    if (retv !== undefined && retv == retv) {
        this.module.set_rv(retv);
    } else if (retv != retv) {
        this.stop(1);
        return sp|1;
    } else {
        throw "cannot resolve " + mod + ":" + fun;
    }

    /*
    if (fun == "stat" || fun == "fstat") {
        console.log('stat buffer 0 '+this.HEAP32[args[1]+0>>2].toString(16));
        console.log('stat buffer 1 '+this.HEAP32[args[1]+4>>2].toString(16));
        console.log('stat buffer 2 '+this.HEAP32[args[1]+8>>2].toString(16));
        console.log('stat buffer 3 '+this.HEAP32[args[1]+12>>2].toString(16));
        console.log('stat buffer 4 '+this.HEAP32[args[1]+16>>2].toString(16));
        console.log('stat buffer 5 '+this.HEAP32[args[1]+20>>2].toString(16));
        console.log('stat buffer 6 '+this.HEAP32[args[1]+24>>2].toString(16));
        console.log('stat buffer 7 '+this.HEAP32[args[1]+28>>2].toString(16));
        console.log('stat buffer 8 '+this.HEAP32[args[1]+32>>2].toString(16));
        console.log('stat buffer 9 '+this.HEAP32[args[1]+36>>2].toString(16));
        console.log('stat buffer a '+this.HEAP32[args[1]+40>>2].toString(16));
        console.log('stat buffer b '+this.HEAP32[args[1]+44>>2].toString(16));
        console.log('stat buffer c '+this.HEAP32[args[1]+48>>2].toString(16));
        console.log('stat buffer d '+this.HEAP32[args[1]+52>>2].toString(16));
        console.log('stat buffer e '+this.HEAP32[args[1]+56>>2].toString(16));
        console.log('stat buffer f '+this.HEAP32[args[1]+60>>2].toString(16));
    }
    */

    return sp;
};

AsmJSThread.prototype.restart = function (dst, src, len, entry)
{
    var initsp = this.initsp();

    this.restartCode = () => {
        if (len) {
            var i;

            for (i = 0; i < len; i++)
                this.HEAP8[dst+i] = this.HEAP8[src+i];
        } else {
            //datainit();
        }

        this.set_pc(entry>>4);
        this.set_sp(initsp+16);
        this.set_initsp(initsp);

        delete this.restartCode;
    };

    this.stop(0);

    return 0;
};

AsmJSThread.prototype.functionByPC = function (pc)
{
    var page = pc & -256;

    return this.process.functions[page];
};

AsmJSThread.prototype.step = function ()
{
    var pc = this.pc();
    var sp = this.sp();
    var rp = 0;
    var isp = pc ? 0 : sp;

    while (true) {
        var cpc = pc;
        var rfp = 0;
        var rpc = 0;

        this.module.set_bogotics(0x7fffffff);
        this.HEAP32[4096+2048>>2] = -1;
        this.HEAP32[4096+2048+4>>2] = -1;
        this.HEAP32[4096+2048+8>>2] = -1;
        this.HEAP32[4096+2048+12>>2] = -1;
        this.HEAP32[4096+2048+16>>2] = -1;
        this.HEAP32[4096+2048+20>>2] = -1;
        this.HEAP32[4096+2048+24>>2] = -1;
        this.HEAP32[4096+2048+28>>2] = -1;
        this.HEAP32[4096+2048+32>>2] = -1;
        this.HEAP32[4096+2048+36>>2] = -1;
        this.HEAP32[4096+2048+40>>2] = -1;
        this.HEAP32[4096+2048+44>>2] = -1;
        this.HEAP32[4096+2048+48>>2] = -1;
        this.HEAP32[4096+2048+48>>2] = -1;
        this.HEAP32[4096+2048+52>>2] = -1;
        this.HEAP32[4096+2048+56>>2] = -1;
        this.HEAP32[4096+2048+60>>2] = -1;
        this.HEAP32[4096+2048+64>>2] = -1;
        this.module.set_bp_addr(4096+2048);

        //console.log('pc ' + pc.toString(16) + ' cpc ' + cpc.toString(16) + ' sp ' + sp.toString(16));

        if (pc == 0) {
            cpc = this.HEAP32[sp+8>>2]>>4;
            rpc = this.HEAP32[sp+12>>2];
        }

        //console.log('v = ' + this.HEAP32[0x3ffffd28>>2].toString(16));
        //console.log('pc ' + pc.toString(16) + ' cpc ' + cpc.toString(16) + ' sp ' + sp.toString(16));

        var f = this.functionByPC(cpc);


        //console.log('rpc ' + rpc.toString(16));
        if (!f)
            throw "no f for " + cpc.toString(16);
        //putstr('pc ' + pc.toString(16) + ' cpc ' + cpc.toString(16) + ' sp ' + sp.toString(16) + ' pc0 ' + f.pc0.toString(16) + ' pc0+dpc ' + this.HEAP32[sp+8>>2].toString(16) + ' rpc ' + rpc.toString(16));
        rp = f.code(pc-(f.pc0), sp+16, 0, 0, rpc, (f.pc0));
        //putstr('rp ' + rp.toString(16));

        if (rp&3) {
            //console.log('should ' + this.HEAP32[sp>>2].toString(16) + ' be ' + isp.toString(16) + '?');
            //console.log('v = ' + this.HEAP32[0x3ffffd28>>2].toString(16));
            //console.log('handoff');
            /* the function has saved its JS stack to the VM stack,
             * or it has aborted. */
            pc = 0;
            sp = rp&-4;
            break;
        }

        if ((rp|3) >= (this.initsp()|3)) {
            /* the function has returned to top level */
            if (this.restartCode) {
                this.restartCode();
                return rp&-4;
            }
            this.stop(0xffffffff);
            break;
        }

        /* The function has returned to a function on the VM stack */
        sp = this.HEAP32[rp>>2];
        pc = 0;
    }

    this.set_pc(pc);
    this.set_sp(sp);

    return rp&-4;
};

AsmJSThread.prototype.pre_call = function (pc, fp, a0, a1)
{
    var sp = this.module.call_frame(fp);
    var f = this.functionByPC(pc>>4);

    var regsize = f.regsize|16;
    var regmask = f.regmask|0xf;

    sp -= regsize;

    HEAP32[sp>>2] = regmask;
    HEAP32[sp+4>>2] = pc|0;
    HEAP32[sp+8>>2] = sp+regsize|0;
    HEAP32[sp+12>>2] = regsize;

    for (var off = 16; off < regsize; off += 4)
        HEAP32[sp+off>>2] = 0;

    if ((regmask & 0xf0) == 0xf0) {
        HEAP32[sp+16>>2] = this.module.get_arg(0);
        HEAP32[sp+20>>2] = this.module.get_arg(1);
        HEAP32[sp+24>>2] = this.module.get_arg(2);
        HEAP32[sp+28>>2] = this.module.get_arg(3);
    }

    if (a0 !== undefined)
        HEAP32[sp+32>>2] = a0;
    if (a1 !== undefined)
        HEAP32[sp+36>>2] = a1;

    sp -= 16;
    HEAP32[sp>>2] = sp+16|0;
    HEAP32[sp+4>>2] = pc|0;

    return sp;
};

AsmJSThread.prototype.indcall = function (mbz, sp, r0, r1, rpc, pc)
{
    pc = pc << 4;

    if (this.HEAP32[pc>>2] == 0x4d4a5254) {
        this.module.set_rv(this.HEAP32[pc+8>>2]);
        pc = this.HEAP32[pc+4>>2];

        pc = pc >> 4;
        if (pc)
            return this.functionByPC(pc).code(0, sp, r0, r1, rpc, pc);
        this.module.set_rv(0);

        return sp;
    } else {
        this.abort(0, pc, sp, r0, r1);
    }
};

AsmJSThread.prototype.abort = function (code, arg0, arg1, arg2, arg3)
{
    code = code|0;
    arg0 = arg0|0;
    arg1 = arg1|0;
    arg2 = arg2|0;
    arg3 = arg3|0;

    switch (code) {
    case 0:
        throw("bad PC " + [arg0.toString(16), arg1.toString(16), arg2.toString(16), arg3.toString(16)] + "!");

    case 1:
        //("NULL pointer called at " + arg + "!");
        return 0|0;

    case -1:
        //console.log("debug " + arg0.toString(16) + " " + arg1.toString(16) + " " + arg2.toString(16) + " " + arg3.toString(16));

        if (false)
        for (var offset = 0x3ffff800; offset < 0x40000000; offset += 0x10)
            console.log(offset.toString(16) + ': ' +
                        this.HEAP32[offset>>2].toString(16) + ' ' +
                        this.HEAP32[offset+4>>2].toString(16) + ' ' +
                        this.HEAP32[offset+8>>2].toString(16) + ' ' +
                        this.HEAP32[offset+12>>2].toString(16));
        break;

    default:
        throw("unknown exception " + code);
    }
}

/* This is somewhat tricky. The dwarf expressions we want to generate are:
 *   DW_CFA_offset_extended_sf: r36 at cfa+8
 *   DW_CFA_expression: r0 (DW_OP_breg2 (r2): 0; DW_OP_breg2 (r2): 0; DW_OP_deref; DW_OP_breg2 (r2): 0; DW_OP_minus; DW_OP_plus)
 *   DW_CFA_def_cfa_register: r0
 *
 * (I have to try again to make the second expression less redundant).
 * The point is that the stack pointer is implicitly set to the CFA,
 * so we work around gcc's apparent inability to generate a
 * DW_OP_call_frame_cfa opcode or use the CFA argument pushed onto the
 * stack by CFA expressions.
 */

AsmJSThread.prototype.eh_return = function (fp, sp, handler)
{
    var a0 = this.HEAP32[fp+24>>2]|0;
    var a1 = this.HEAP32[fp+28>>2]|0;
    var a2 = this.HEAP32[fp+32>>2]|0;
    var a3 = this.HEAP32[fp+36>>2]|0;

/*
    console.log("handler " + handler.toString(16));

    console.log("a0 " + a0 + " (" + this.module.get_arg(0) + ")");
    console.log("a1 " + a1 + " (" + this.module.get_arg(1) + ")");
    console.log("a2 " + a2 + " (" + this.module.get_arg(2) + ")");
    console.log("a3 " + a3 + " (" + this.module.get_arg(3) + ")");
*/

    this.module.set_arg(0, a0);
    this.module.set_arg(1, a1);
    this.module.set_arg(2, a2);
    this.module.set_arg(3, a3);

    //console.log("fp " + fp.toString(16));

    fp = this.HEAP32[this.HEAP32[fp>>2]>>2];

    //console.log("changing pc from " + this.HEAP32[fp+8>>2].toString(16));

    this.HEAP32[fp+8>>2] = handler;
/*
        for (var offset = 0x3ffff800; offset < 0x40000000; offset += 0x10)
            console.log(offset.toString(16) + ': ' +
                        this.HEAP32[offset>>2].toString(16) + ' ' +
                        this.HEAP32[offset+4>>2].toString(16) + ' ' +
                        this.HEAP32[offset+8>>2].toString(16) + ' ' +
                        this.HEAP32[offset+12>>2].toString(16));
    console.log("fp " + fp.toString(16));
*/


    return fp|3;
};

AsmJSThread.prototype.freeze = function ()
{
    return new FrozenAsmJSThread(this);
};

function FrozenAsmJSThread(thread)
{
    this.threadpage = thread.threadpage;
}

FrozenAsmJSThread.prototype.thaw = function (process, module)
{
    var n = new AsmJSThread(process, module, this.threadpage);

    return n;
};

function AsmJSProcess(system, heap)
{
    this.system = system;
    system.processes.push(this);

    this.fds = [];
    this.ddroot = system.ddroot;
    this.ddcwd = system.ddcwd;

    this.heap = heap;
    this.HEAP8 = new Int8Array(this.heap);
    this.HEAP16 = new Int16Array(this.heap);
    this.HEAP32 = new Int32Array(this.heap);
    this.HEAPU8 = new Uint8Array(this.heap);
    this.HEAPU16 = new Uint16Array(this.heap);
    this.HEAPU32 = new Uint32Array(this.heap);
    this.HEAPF32 = new Float32Array(this.heap);
    this.HEAPF64 = new Float64Array(this.heap);

    this.functions = {};
    this.threads = [];
}

AsmJSProcess.prototype.deffun = function(page, fo)
{
    this.functions[page] = fo;

    if (fo.name == "__pre_main") {
        this.entry = fo.pc0;
        premain_pc = fo.pc0;
    } else if (fo.name == "_start") {
        if (this.entry === undefined)
            this.entry = fo.pc0;
        main_pc = fo.pc0;
    } else if (fo.name == "gdbstub_entry") {
        gdbstub_pc = fo.pc0;
    }
};

AsmJSProcess.prototype.freeze = function ()
{
    return new FrozenAsmJSProcess(this);
};

function FrozenAsmJSProcess(process)
{
    this.fds = process.fds;
    this.threads = process.threads;
    this.system = process.system;
    this.functions = process.functions;
    this.heap = process.heap;

    for (var i = 0; i < this.threads.length; i++)
        this.threads[i] = this.threads[i].freeze();

    var fds = [];
    for (var i = 0; i < this.fds.length; i++)
        fds[i] = this.fds[i].freeze();

    this.fds = fds;

    delete this.system;
    delete this.functions;
}

FrozenAsmJSProcess.prototype.thaw = function (system)
{
    var n = new AsmJSProcess(system, this.heap);

    var fds = [];
    for (var i = 0; i < this.fds.length; i++) {
        var fd = this.fds[i];
        fds[i] = FrozenThinThinFD.prototype.thaw.call(fd,
                                                      n,
                                                      function (x) { return global.postMessage(x) });
    }
    n.fds = fds;

    n.threads = [];
    n.system = system;
    n.functions = {};
    n.heap = new ArrayBuffer(this.heap.byteLength);
    var newHEAP8 = new Int8Array(n.heap);
    var oldHEAP8 = new Int8Array(this.heap);
    for (var i = 0; i < this.heap.byteLength; i++)
        newHEAP8[i] = oldHEAP8[i];

    n.newHEAP8 = newHEAP8;
    n.oldHEAP8 = oldHEAP8;

    n.HEAP8 = new Int8Array(n.heap);
    n.HEAP16 = new Int16Array(n.heap);
    n.HEAP32 = new Int32Array(n.heap);
    n.HEAPU8 = new Uint8Array(n.heap);
    n.HEAPU16 = new Uint16Array(n.heap);
    n.HEAPU32 = new Uint32Array(n.heap);
    n.HEAPF32 = new Float32Array(n.heap);
    n.HEAPF64 = new Float64Array(n.heap);

    for (var i = 0; i < this.threads.length; i++)
        n.threads[i] = FrozenAsmJSThread.prototype.thaw.call(this.threads[i],
                                                             n,
                                                             gMod);

    return n;
};

function AsmJSSystem()
{
    this.processes = [];
    this.threads = [];
    this.runqueue = [];
}

AsmJSSystem.prototype.init_sp = function (heap, off, args, env)
{
    var HEAP8 = new Int8Array(heap);
    var HEAP32 = new Int32Array(heap);
    var i;
    var eo = [];
    var ao = [];
    for (i = env.length-1; i >= 0; i--) {
        var str = env[i];
        off -= str.length+1;
        CStringTo(str, HEAP8, off);
        eo.push(off);
    }
    for (i = args.length-1; i >= 0; i--) {
        var str = args[i];
        off -= str.length+1;
        CStringTo(str, HEAP8, off);
        ao.push(off);
    }
    off &= -4;

    HEAP32[(off-=4)>>2] = 0;

    for (i = 0; i < eo.length; i++) {
        HEAP32[(off-=4)>>2] = eo[i];
    }

    var envp = off;

    HEAP32[(off-=4)>>2] = 0;

    for (i = 0; i < ao.length; i++) {
        HEAP32[(off-=4)>>2] = ao[i];
    }

    var argv = off;
    var argc = ao.length;

    off &= -16;

    HEAP32[(off-=4)>>2] = 0; /* padding */
    HEAP32[(off-=4)>>2] = envp;
    HEAP32[(off-=4)>>2] = argv;
    HEAP32[(off-=4)>>2] = argc;

    HEAP32[(off-=4)>>2] = 3; /* argument count */
    off -= 4;
    HEAP32[off>>2] = off+24; /* argument something */
    HEAP32[(off-=4)>>2] = 0; /* return FP */
    HEAP32[(off-=4)>>2] = 0; /* return PC */

    if (off & 4) {
        throw "unaligned off";
    }

    return off;
};

#{JSV<zeropage*> zp("4096", "HEAP");}
#{JSV<threadpage*> tp1("8192", "HEAP");}

AsmJSSystem.prototype.instantiate = function (module, args, env)
{
    var size = module.top_of_memory;
    var heap = new ArrayBuffer(size);
    var HEAP32 = new Int32Array(heap);

    %{zp[&zeropage::top_of_memory] = "module.top_of_memory"}
    %{zp[&zeropage::top_of_sbrk] = "module.start_of_sbrk"}
    %{zp[&zeropage::thread_list]} = %{tp1};
    %{zp[&zeropage::bottom_of_sbrk] = "module.start_of_sbrk"}

    %{tp1[&threadpage::next]} = %{tp1};
    %{tp1[&threadpage::prev]} = %{tp1};
    %{tp1[&threadpage::id] = "1"}
    %{tp1[&threadpage::bottom_of_stack] = "module.bottom_of_stack"}
    %{tp1[&threadpage::top_of_stack] = "module.top_of_stack"}

    var sp = this.init_sp(heap, module.top_of_stack, args, env);
    %{tp1[&threadpage::sp] = "sp"}
    %{tp1[&threadpage::initsp] = "sp"}

    var process = new AsmJSProcess(this, heap);
    var thread = new AsmJSThread(process, module, 8192);
    thread.module.instantiate(thread);
    %{tp1[&threadpage::pc] = "process.entry"}
    if (false && typeof document !== "undefined") {
        new ThinThinFD(process, 0);
        new VT100FD(process, document.getElementById("output2"), 1, 0);
        new ThinThinFD(process, 2);
    } else {
        new ThinThinFD(process, 0);
        new ThinThinFD(process, 1);
        new ThinThinFD(process, 2);

        //console.log('restarting');

    }
    this.runqueue.push(thread);
};

AsmJSSystem.prototype.step = function ()
{
    if (this.runqueue.length == 0)
        return;

    var thread = this.runqueue.shift();

    thread.step();

    if (!thread.stopped())
        this.runqueue.push(thread);
};
