var vm = new Wasm32VM();
var module = new Wasm32Module(os.file.readFile(path, "binary"));
var system = new Wasm32System();

function abtoascii(ab)
{
    let h8 = new Uint8Array(ab);
    let s = "";

    for (var i = 0; i < h8.byteLength; i++) {
        let c = h8[i];

        if (c >= 0x80)
            throw "non-ASCII byte";

        s += String.fromCharCode(h8[i]);
    }

    return s;
}

system.instantiate(module, vm, args, environment_variables()).then(() => {
    var cs = WebAssembly.Module.customSections(module.module, "dyninfo");
    for (let c of cs) {
        let s = abtoascii(c);
        eval(s);
    }
    try {
        run = () => {
            try {
                system.threads[0].step();
                if (!system.threads[0].stopped())
                    Promise.resolve().then(run);
                else
                    console.log('stopped');
            } catch (e) {
                console.log("another exception");
                console.log(e);
                console.log(e.stack);
            }
        };
        run();
    } catch (e) {
        console.log("exception");
        console.log(e);
        console.log(e.stack);
    }
}).catch((e) => {
    console.log("caught");
    console.log(e);
});
